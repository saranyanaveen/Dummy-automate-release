name: Release Versioning

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed

jobs:
  versioning:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Get the latest tag version
        id: get_version
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}

          echo "MAJOR=$MAJOR" >> $GITHUB_ENV
          echo "MINOR=$MINOR" >> $GITHUB_ENV
          echo "PATCH=$PATCH" >> $GITHUB_ENV

      - name: Detect change type (major, minor, patch)
        id: detect_change
        run: |
          LABELS=$(echo "${{ toJSON(github.event.pull_request.labels) }}" | jq -r '.[].name' || echo "")
          if [[ "$LABELS" == *"major"* ]]; then
            VERSION_TYPE="major"
          elif [[ "$LABELS" == *"minor"* ]]; then
            VERSION_TYPE="minor"
          else
            VERSION_TYPE="patch"
          fi

          echo "VERSION_TYPE=$VERSION_TYPE" >> $GITHUB_ENV

      - name: Calculate next version
        id: calculate_next_version
        run: |
          case $VERSION_TYPE in
            major)
              NEXT_MAJOR=$((MAJOR + 1))
              NEXT_MINOR=0
              NEXT_PATCH=0
              ;;
            minor)
              NEXT_MAJOR=$MAJOR
              NEXT_MINOR=$((MINOR + 1))
              NEXT_PATCH=0
              ;;
            patch)
              NEXT_MAJOR=$MAJOR
              NEXT_MINOR=$MINOR
              NEXT_PATCH=$((PATCH + 1))
              ;;
          esac
          echo "NEXT_MAJOR=$NEXT_MAJOR" >> $GITHUB_ENV
          echo "NEXT_MINOR=$NEXT_MINOR" >> $GITHUB_ENV
          echo "NEXT_PATCH=$NEXT_PATCH" >> $GITHUB_ENV
          echo "Next version will be: v${NEXT_MAJOR}.${NEXT_MINOR}.${NEXT_PATCH}"

      - name: Generate changelog and create or update release
        id: release
        run: |
          NEXT_VERSION="v${NEXT_MAJOR}.${NEXT_MINOR}.${NEXT_PATCH}"
          echo "Preparing release for $NEXT_VERSION"

          # Get commit log between last tag and HEAD
          COMMIT_LOG=$(git log ${LATEST_TAG}..HEAD --oneline)

          # Generate a structured changelog
          CHANGELOG="## What's Changed\n"

          # Categorize commits into Added, Fixed, Documentation
          FEATURES=$(echo "$COMMIT_LOG" | grep -i '^feat' | sed 's/^/### Added\n/' )
          BUG_FIXES=$(echo "$COMMIT_LOG" | grep -i '^fix' | sed 's/^/### Fixed\n/' )
          DOCUMENTATION=$(echo "$COMMIT_LOG" | grep -i '^docs' | sed 's/^/### Documentation\n/' )

          CHANGELOG+="$FEATURES\n$BUG_FIXES\n$DOCUMENTATION"

          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="No changes"
          fi

          # Fetch existing release ID if it exists
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            | jq -r ".[] | select(.tag_name == \"$NEXT_VERSION\").id")

          if [ -z "$RELEASE_ID" ]; then
            echo "Creating a new release..."
            curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "{
                \"tag_name\": \"$NEXT_VERSION\",
                \"target_commitish\": \"main\",
                \"name\": \"Release $NEXT_VERSION\",
                \"body\": \"$CHANGELOG\",
                \"draft\": false,
                \"prerelease\": false
              }" \
              https://api.github.com/repos/${{ github.repository }}/releases
          else
            echo "Updating existing release with ID: $RELEASE_ID"
            curl -X PATCH -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "{
                \"tag_name\": \"$NEXT_VERSION\",
                \"target_commitish\": \"main\",
                \"name\": \"Release $NEXT_VERSION\",
                \"body\": \"$CHANGELOG\",
                \"draft\": false,
                \"prerelease\": false
              }" \
              https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID
          fi
