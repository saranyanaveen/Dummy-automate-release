---
    name: Release Versioning
    on:
      push:
        branches:
          - main
      pull_request:
        types:
          - closed
    jobs:
      versioning:
        runs-on: ubuntu-latest
        steps:
          - name: Checkout repository
            uses: actions/checkout@v3
            with:
              fetch-depth: 0
              fetch-tags: true
          - name: Get the latest tag version
            id: get_version
            run: >
              # Get the latest tag (e.g., v1.0.0). If no tags exist, default to v0.0.0
    
              LATEST_TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")
    
              echo "Latest tag: $LATEST_TAG"
    
    
              # Strip the 'v' from the tag (e.g., v1.0.0 -> 1.0.0)
    
              VERSION=${LATEST_TAG#v}
    
              echo "Version: $VERSION"
    
    
              # Split the version into major, minor, patch
    
              IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
    
              MAJOR=${VERSION_PARTS[0]:-0}
    
              MINOR=${VERSION_PARTS[1]:-0}
    
              PATCH=${VERSION_PARTS[2]:-0}
    
    
              # Output the parsed version parts
    
              echo "MAJOR=$MAJOR" >> $GITHUB_ENV
    
              echo "MINOR=$MINOR" >> $GITHUB_ENV
    
              echo "PATCH=$PATCH" >> $GITHUB_ENV
          - name: Detect change type (major, minor, patch)
            id: detect_change
            run: >
              # Get the labels from the merged pull request (if applicable)
    
              if [ "${{ github.event.pull_request.merged }}" = "true" ]; then
                LABELS=$(echo "${{ github.event.pull_request.labels }}" | jq -r '.[].name')
              else
                LABELS=""
              fi
    
    
              echo "Labels applied: $LABELS"
    
    
              # Determine the type of version bump
    
              if [[ "$LABELS" == *"major"* ]]; then
                VERSION_TYPE="major"
              elif [[ "$LABELS" == *"minor"* ]]; then
                VERSION_TYPE="minor"
              else
                VERSION_TYPE="patch" # Default to patch
              fi
    
    
              echo "VERSION_TYPE=$VERSION_TYPE" >> $GITHUB_ENV
          - name: Calculate next version
            id: calculate_next_version
            run: |
              # Increment the version based on the detected change type
              case $VERSION_TYPE in
                major)
                  NEXT_MAJOR=$((MAJOR + 1))
                  NEXT_MINOR=0
                  NEXT_PATCH=0
                  ;;
                minor)
                  NEXT_MAJOR=$MAJOR
                  NEXT_MINOR=$((MINOR + 1))
                  NEXT_PATCH=0
                  ;;
                patch)
                  NEXT_MAJOR=$MAJOR
                  NEXT_MINOR=$MINOR
                  NEXT_PATCH=$((PATCH + 
    